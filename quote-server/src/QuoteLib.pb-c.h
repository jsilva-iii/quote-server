/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_QuoteLib_2eproto__INCLUDED
#define PROTOBUF_C_QuoteLib_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "descriptor.pb-c.h"

typedef struct _QuoteLib__Quote QuoteLib__Quote;
typedef struct _QuoteLib__Trade QuoteLib__Trade;
typedef struct _QuoteLib__StkStatus QuoteLib__StkStatus;
typedef struct _QuoteLib__Index QuoteLib__Index;
typedef struct _QuoteLib__Dividend QuoteLib__Dividend;
typedef struct _QuoteLib__HiLo52 QuoteLib__HiLo52;
typedef struct _QuoteLib__EquityVolume QuoteLib__EquityVolume;
typedef struct _QuoteLib__Moc QuoteLib__Moc;
typedef struct _QuoteLib__Info QuoteLib__Info;
typedef struct _QuoteLib__EquitySummary QuoteLib__EquitySummary;
typedef struct _QuoteLib__MktStat QuoteLib__MktStat;
typedef struct _QuoteLib__OptQuote QuoteLib__OptQuote;
typedef struct _QuoteLib__OptTrade QuoteLib__OptTrade;
typedef struct _QuoteLib__OptRFQ QuoteLib__OptRFQ;
typedef struct _QuoteLib__OptStat QuoteLib__OptStat;
typedef struct _QuoteLib__FutQuote QuoteLib__FutQuote;
typedef struct _QuoteLib__FutTrade QuoteLib__FutTrade;
typedef struct _QuoteLib__FutRFQ QuoteLib__FutRFQ;
typedef struct _QuoteLib__FutStat QuoteLib__FutStat;
typedef struct _QuoteLib__FutOptBulletin QuoteLib__FutOptBulletin;
typedef struct _QuoteLib__InstrDfn QuoteLib__InstrDfn;
typedef struct _QuoteLib__Depthquote QuoteLib__Depthquote;
typedef struct _QuoteLib__BDMDepth QuoteLib__BDMDepth;
typedef struct _QuoteLib__EndOfSales QuoteLib__EndOfSales;
typedef struct _QuoteLib__QfSymbStatus QuoteLib__QfSymbStatus;
typedef struct _QuoteLib__MarketState QuoteLib__MarketState;
typedef struct _QuoteLib__TradingTierStatus QuoteLib__TradingTierStatus;


/* --- enums --- */

typedef enum _QuoteLib__CONSTANTS {
  QUOTE_LIB__CONSTANTS__KVMSG_KEY_MAX = 33,
  QUOTE_LIB__CONSTANTS__KEY_TYPE_SEPARATOR = 30
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(QUOTE_LIB__CONSTANTS)
} QuoteLib__CONSTANTS;
typedef enum _QuoteLib__BDMQuoteStatus {
  QUOTE_LIB__BDMQUOTE_STATUS__S_SUSPENDED = -4,
  QUOTE_LIB__BDMQUOTE_STATUS__R_RESERVED = -3,
  QUOTE_LIB__BDMQUOTE_STATUS__Y_PRE_OPEN = -2,
  QUOTE_LIB__BDMQUOTE_STATUS__O_OPENIN = -1,
  QUOTE_LIB__BDMQUOTE_STATUS__T_TRADING = 0,
  QUOTE_LIB__BDMQUOTE_STATUS__Y_FORBIDDEN = 1,
  QUOTE_LIB__BDMQUOTE_STATUS__H_HALTED = 2,
  QUOTE_LIB__BDMQUOTE_STATUS__Z_FROZEN = 3,
  QUOTE_LIB__BDMQUOTE_STATUS__A_COMPLIANCE = 4,
  QUOTE_LIB__BDMQUOTE_STATUS__C_EOD = 5
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(QUOTE_LIB__BDMQUOTE_STATUS)
} QuoteLib__BDMQuoteStatus;
typedef enum _QuoteLib__StockStatus {
  QUOTE_LIB__STOCK_STATUS__A = 0,
  QUOTE_LIB__STOCK_STATUS__I = 1,
  QUOTE_LIB__STOCK_STATUS__AR = 2,
  QUOTE_LIB__STOCK_STATUS__IR = 3,
  QUOTE_LIB__STOCK_STATUS__AS = 4,
  QUOTE_LIB__STOCK_STATUS__IS = 5,
  QUOTE_LIB__STOCK_STATUS__AG = 6,
  QUOTE_LIB__STOCK_STATUS__IG = 7,
  QUOTE_LIB__STOCK_STATUS__AE = 8,
  QUOTE_LIB__STOCK_STATUS__AF = 9,
  QUOTE_LIB__STOCK_STATUS__IE = 10,
  QUOTE_LIB__STOCK_STATUS__IF = 11
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(QUOTE_LIB__STOCK_STATUS)
} QuoteLib__StockStatus;
typedef enum _QuoteLib__DivCodes {
  QUOTE_LIB__DIV_CODES__S_BLANK = 0,
  QUOTE_LIB__DIV_CODES__S_CASH = 1,
  QUOTE_LIB__DIV_CODES__S_OPTION_TRD = 2,
  QUOTE_LIB__DIV_CODES__S_INC_DIV = 3,
  QUOTE_LIB__DIV_CODES__S_DEC_DIV = 4,
  QUOTE_LIB__DIV_CODES__S_SKT_DIV = 5,
  QUOTE_LIB__DIV_CODES__S_FST_DIV = 6,
  QUOTE_LIB__DIV_CODES__S_FST_S_INC = 7,
  QUOTE_LIB__DIV_CODES__S_FLW_SKT_SPLIT = 8,
  QUOTE_LIB__DIV_CODES__S_XTR_DIV = 9,
  QUOTE_LIB__DIV_CODES__S_US_CCY_DIV = 10,
  QUOTE_LIB__DIV_CODES__S_EST_DIV = 11,
  QUOTE_LIB__DIV_CODES__S_OT_CCY_DIV = 12,
  QUOTE_LIB__DIV_CODES__S_PART_ARR = 13,
  QUOTE_LIB__DIV_CODES__S_TAX_DEF = 14,
  QUOTE_LIB__DIV_CODES__S_FST_REORG = 15,
  QUOTE_LIB__DIV_CODES__S_RT_WRT_EXDIV = 16,
  QUOTE_LIB__DIV_CODES__S_OR_SKT_ILC = 17,
  QUOTE_LIB__DIV_CODES__S_DIV_RES = 18,
  QUOTE_LIB__DIV_CODES__S_DIV_OM = 19,
  QUOTE_LIB__DIV_CODES__S_DIV_DEF = 20,
  QUOTE_LIB__DIV_CODES__S_ARR_PIF = 21,
  QUOTE_LIB__DIV_CODES__S_DIV_RESC = 22,
  QUOTE_LIB__DIV_CODES__S_FORMULA = 99,
  QUOTE_LIB__DIV_CODES__L_SHIFT = 7,
  QUOTE_LIB__DIV_CODES__D_TO_EX = 127,
  QUOTE_LIB__DIV_CODES__MRKR1 = 16256,
  QUOTE_LIB__DIV_CODES__MRKR2 = 2080768,
  QUOTE_LIB__DIV_CODES__MRKR3 = 266338304
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(QUOTE_LIB__DIV_CODES)
} QuoteLib__DivCodes;
typedef enum _QuoteLib__CrossTypes {
  QUOTE_LIB__CROSS_TYPES__NORM = 0,
  QUOTE_LIB__CROSS_TYPES__INT = 1,
  QUOTE_LIB__CROSS_TYPES__CONT = 2,
  QUOTE_LIB__CROSS_TYPES__SPEC = 3,
  QUOTE_LIB__CROSS_TYPES__VWAP = 4,
  QUOTE_LIB__CROSS_TYPES__BASI = 5
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(QUOTE_LIB__CROSS_TYPES)
} QuoteLib__CrossTypes;
typedef enum _QuoteLib__SettlementTypes {
  QUOTE_LIB__SETTLEMENT_TYPES__CA = 0,
  QUOTE_LIB__SETTLEMENT_TYPES__NN = 1,
  QUOTE_LIB__SETTLEMENT_TYPES__MS = 2,
  QUOTE_LIB__SETTLEMENT_TYPES__CT = 3,
  QUOTE_LIB__SETTLEMENT_TYPES__DT = 4
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(QUOTE_LIB__SETTLEMENT_TYPES)
} QuoteLib__SettlementTypes;
typedef enum _QuoteLib__BDMTrdMrks {
  QUOTE_LIB__BDMTRD_MRKS__NORM_TRD = 32,
  QUOTE_LIB__BDMTRD_MRKS__CXL_TRD = 88,
  QUOTE_LIB__BDMTRD_MRKS__ASOF_TRD = 65,
  QUOTE_LIB__BDMTRD_MRKS__BLK_TRD = 66,
  QUOTE_LIB__BDMTRD_MRKS__X_TRD = 68,
  QUOTE_LIB__BDMTRD_MRKS__EFP_TRD = 69,
  QUOTE_LIB__BDMTRD_MRKS__IMP_TRD = 73,
  QUOTE_LIB__BDMTRD_MRKS__COM_BL_TRD = 75,
  QUOTE_LIB__BDMTRD_MRKS__LATE_TRD = 76,
  QUOTE_LIB__BDMTRD_MRKS__STRT_TRD = 80,
  QUOTE_LIB__BDMTRD_MRKS__EFR_TRD = 82,
  QUOTE_LIB__BDMTRD_MRKS__REF_PRC = 83,
  QUOTE_LIB__BDMTRD_MRKS__COM_TRD = 84,
  QUOTE_LIB__BDMTRD_MRKS__V_ADJ_TRD = 86
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(QUOTE_LIB__BDMTRD_MRKS)
} QuoteLib__BDMTrdMrks;
typedef enum _QuoteLib__CCY {
  QUOTE_LIB__CCY__CAD = 0,
  QUOTE_LIB__CCY__USD = 1,
  QUOTE_LIB__CCY__GBP = 2,
  QUOTE_LIB__CCY__AUD = 3,
  QUOTE_LIB__CCY__BSD = 4,
  QUOTE_LIB__CCY__JPY = 5,
  QUOTE_LIB__CCY__FRC = 6,
  QUOTE_LIB__CCY__GUI = 7,
  QUOTE_LIB__CCY__NZD = 8,
  QUOTE_LIB__CCY__EUR = 9
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(QUOTE_LIB__CCY)
} QuoteLib__CCY;
typedef enum _QuoteLib__MktState {
  QUOTE_LIB__MKT_STATE__PRE_OPEN = 1,
  QUOTE_LIB__MKT_STATE__OPENING = 2,
  QUOTE_LIB__MKT_STATE__OPEN = 3,
  QUOTE_LIB__MKT_STATE__CLOSED = 4,
  QUOTE_LIB__MKT_STATE__EXT_HRS_OPE = 5,
  QUOTE_LIB__MKT_STATE__EXT_HRS_CLS = 6,
  QUOTE_LIB__MKT_STATE__EXT_HRS_CXL = 7,
  QUOTE_LIB__MKT_STATE__MOC_IMB = 8,
  QUOTE_LIB__MKT_STATE__CCP_DET = 9,
  QUOTE_LIB__MKT_STATE__PME_EXT = 10,
  QUOTE_LIB__MKT_STATE__CLOSING = 11
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(QUOTE_LIB__MKT_STATE)
} QuoteLib__MktState;
typedef enum _QuoteLib__MsgTypes {
  QUOTE_LIB__MSG_TYPES__UNDEFINED = 0,
  QUOTE_LIB__MSG_TYPES__QUOTE = 1,
  QUOTE_LIB__MSG_TYPES__MOC = 2,
  QUOTE_LIB__MSG_TYPES__TRADE = 3,
  QUOTE_LIB__MSG_TYPES__TRADE_CXL = 4,
  QUOTE_LIB__MSG_TYPES__TRADE_CORR = 5,
  QUOTE_LIB__MSG_TYPES__STK_STATUS = 6,
  QUOTE_LIB__MSG_TYPES__INDEX = 7,
  QUOTE_LIB__MSG_TYPES__EQ_SUMM = 8,
  QUOTE_LIB__MSG_TYPES__DIVIDEND = 9,
  QUOTE_LIB__MSG_TYPES__HILO52 = 10,
  QUOTE_LIB__MSG_TYPES__BULLETIN = 11,
  QUOTE_LIB__MSG_TYPES__EQUITY_VOLUME = 12,
  QUOTE_LIB__MSG_TYPES__INFO_MSG = 13,
  QUOTE_LIB__MSG_TYPES__MKT_STAT = 14,
  QUOTE_LIB__MSG_TYPES__OPTION_QUOTE = 30,
  QUOTE_LIB__MSG_TYPES__OPTION_TRADE = 31,
  QUOTE_LIB__MSG_TYPES__OPTION_RFQ = 32,
  QUOTE_LIB__MSG_TYPES__OPTION_STAT = 33,
  QUOTE_LIB__MSG_TYPES__FUTURE_QUOTE = 34,
  QUOTE_LIB__MSG_TYPES__FUTURE_TRADE = 35,
  QUOTE_LIB__MSG_TYPES__FUTURE_RFQ = 36,
  QUOTE_LIB__MSG_TYPES__FUTURE_STAT = 37,
  QUOTE_LIB__MSG_TYPES__FUTOPT_BULLETIN = 38,
  QUOTE_LIB__MSG_TYPES__OPTION_DFN = 39,
  QUOTE_LIB__MSG_TYPES__FUTURE_DFN = 40,
  QUOTE_LIB__MSG_TYPES__FUTOPT_DFN = 41,
  QUOTE_LIB__MSG_TYPES__STRAT_DFN = 42,
  QUOTE_LIB__MSG_TYPES__OPT_DEPTH = 43,
  QUOTE_LIB__MSG_TYPES__FUOP_DEPTH = 44,
  QUOTE_LIB__MSG_TYPES__FUT_DEPTH = 45,
  QUOTE_LIB__MSG_TYPES__STR_DEPTH = 46,
  QUOTE_LIB__MSG_TYPES__DEPTH_QUOTE = 47,
  QUOTE_LIB__MSG_TYPES__FO_END_OF_TRANS = 48,
  QUOTE_LIB__MSG_TYPES__QF_SYM_STATUS = 49,
  QUOTE_LIB__MSG_TYPES__QF_MOC_PMD = 50,
  QUOTE_LIB__MSG_TYPES__QF_MKT_STATE = 51,
  QUOTE_LIB__MSG_TYPES__QF_TRD_TIER_STATUS = 52,
  QUOTE_LIB__MSG_TYPES__FOREX_QUOTE = 53
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(QUOTE_LIB__MSG_TYPES)
} QuoteLib__MsgTypes;

/* --- messages --- */

struct  _QuoteLib__Quote
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  double ask;
  double bid;
  int32_t asksize;
  int32_t bidsize;
  char *ex_time;
};
extern char quote_lib__quote__ex_time__default_value[];
#define QUOTE_LIB__QUOTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__quote__descriptor) \
    , QUOTE_LIB__MSG_TYPES__QUOTE, 0, 0, 0, 0, quote_lib__quote__ex_time__default_value }


struct  _QuoteLib__Trade
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  double last;
  int32_t volume;
  protobuf_c_boolean has_buyerid;
  int32_t buyerid;
  protobuf_c_boolean has_sellerid;
  int32_t sellerid;
  char *trdtime;
  protobuf_c_boolean has_xtype;
  QuoteLib__CrossTypes xtype;
  protobuf_c_boolean has_isopen;
  protobuf_c_boolean isopen;
  protobuf_c_boolean has_isbypass;
  protobuf_c_boolean isbypass;
  protobuf_c_boolean has_ismoc;
  protobuf_c_boolean ismoc;
  protobuf_c_boolean has_sterms;
  QuoteLib__SettlementTypes sterms;
  char *ex_time;
  protobuf_c_boolean has_lo_time;
  int64_t lo_time;
  protobuf_c_boolean has_trd_px;
  double trd_px;
  protobuf_c_boolean has_iscxl;
  protobuf_c_boolean iscxl;
  protobuf_c_boolean has_iscor;
  protobuf_c_boolean iscor;
};
extern char quote_lib__trade__trd_time__default_value[];
extern char quote_lib__trade__ex_time__default_value[];
#define QUOTE_LIB__TRADE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__trade__descriptor) \
    , QUOTE_LIB__MSG_TYPES__TRADE, 0, 0, 0,0, 0,0, quote_lib__trade__trd_time__default_value, 0,QUOTE_LIB__CROSS_TYPES__NORM, 0,0, 0,0, 0,0, 0,QUOTE_LIB__SETTLEMENT_TYPES__CA, quote_lib__trade__ex_time__default_value, 0,0, 0,0, 0,0, 0,0 }


struct  _QuoteLib__StkStatus
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  char *timehalted;
  char *reason;
  char *expectedopen;
  QuoteLib__StockStatus state;
};
extern char quote_lib__stk_status__time_halted__default_value[];
extern char quote_lib__stk_status__reason__default_value[];
extern char quote_lib__stk_status__expected_open__default_value[];
#define QUOTE_LIB__STK_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__stk_status__descriptor) \
    , QUOTE_LIB__MSG_TYPES__STK_STATUS, quote_lib__stk_status__time_halted__default_value, quote_lib__stk_status__reason__default_value, quote_lib__stk_status__expected_open__default_value, QUOTE_LIB__STOCK_STATUS__A }


struct  _QuoteLib__Index
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  protobuf_c_boolean isinterim;
  protobuf_c_boolean has_last;
  double last;
  protobuf_c_boolean has_change;
  double change;
  protobuf_c_boolean has_volume;
  double volume;
  protobuf_c_boolean has_value;
  int32_t value;
  protobuf_c_boolean has_high;
  double high;
  protobuf_c_boolean has_low;
  double low;
  protobuf_c_boolean has_close;
  double close;
  protobuf_c_boolean has_open;
  double open;
  protobuf_c_boolean has_bid;
  double bid;
  protobuf_c_boolean has_ask;
  double ask;
  protobuf_c_boolean has_yield;
  double yield;
  protobuf_c_boolean has_pe;
  double pe;
  protobuf_c_boolean has_isclose;
  protobuf_c_boolean isclose;
  protobuf_c_boolean has_settle;
  double settle;
};
#define QUOTE_LIB__INDEX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__index__descriptor) \
    , QUOTE_LIB__MSG_TYPES__INDEX, 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _QuoteLib__Dividend
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  char *paydate;
  char *recdate;
  char *exdate;
  char *decdate;
  char *divstr;
  float div;
  uint32_t markers;
};
extern char quote_lib__dividend__paydate__default_value[];
extern char quote_lib__dividend__recdate__default_value[];
extern char quote_lib__dividend__exdate__default_value[];
extern char quote_lib__dividend__decdate__default_value[];
extern char quote_lib__dividend__divstr__default_value[];
#define QUOTE_LIB__DIVIDEND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__dividend__descriptor) \
    , QUOTE_LIB__MSG_TYPES__DIVIDEND, quote_lib__dividend__paydate__default_value, quote_lib__dividend__recdate__default_value, quote_lib__dividend__exdate__default_value, quote_lib__dividend__decdate__default_value, quote_lib__dividend__divstr__default_value, 0, 0 }


struct  _QuoteLib__HiLo52
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
};
#define QUOTE_LIB__HI_LO52__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__hi_lo52__descriptor) \
    , QUOTE_LIB__MSG_TYPES__HILO52 }


struct  _QuoteLib__EquityVolume
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
};
#define QUOTE_LIB__EQUITY_VOLUME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__equity_volume__descriptor) \
    , QUOTE_LIB__MSG_TYPES__EQUITY_VOLUME }


struct  _QuoteLib__Moc
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  protobuf_c_boolean has_side;
  int32_t side;
  protobuf_c_boolean has_ccp;
  int32_t ccp;
  protobuf_c_boolean has_vwap;
  int32_t vwap;
  protobuf_c_boolean has_state;
  QuoteLib__StockStatus state;
  protobuf_c_boolean has_ccp_pow;
  int32_t ccp_pow;
  protobuf_c_boolean has_vwap_pow;
  int32_t vwap_pow;
  char *ex_time;
};
extern char quote_lib__moc__ex_time__default_value[];
#define QUOTE_LIB__MOC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__moc__descriptor) \
    , QUOTE_LIB__MSG_TYPES__MOC, 0,0, 0,0, 0,0, 0,QUOTE_LIB__STOCK_STATUS__A, 0,5, 0,5, quote_lib__moc__ex_time__default_value }


struct  _QuoteLib__Info
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  char *msg;
  char *ex_time;
};
extern char quote_lib__info__msg__default_value[];
extern char quote_lib__info__ex_time__default_value[];
#define QUOTE_LIB__INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__info__descriptor) \
    , QUOTE_LIB__MSG_TYPES__INFO_MSG, quote_lib__info__msg__default_value, quote_lib__info__ex_time__default_value }


struct  _QuoteLib__EquitySummary
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  double ask;
  double bid;
  int32_t asksize;
  int32_t bidsize;
  double last;
  int32_t tick;
  double chgfromclose;
  double open;
  double high;
  double low;
  double value;
  double volume;
  int32_t trades;
  QuoteLib__CCY ccy;
  double adivs;
  QuoteLib__CCY dccy;
  int32_t imo;
  double eps;
};
#define QUOTE_LIB__EQUITY_SUMMARY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__equity_summary__descriptor) \
    , QUOTE_LIB__MSG_TYPES__EQ_SUMM, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, QUOTE_LIB__CCY__CAD, 0, QUOTE_LIB__CCY__CAD, 0, 0 }


struct  _QuoteLib__MktStat
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  double high;
  double low;
  double close;
  double pclose;
  int32_t volume;
  double value;
  char *lowtime;
  char *hightime;
  double open;
  int32_t numtrades;
  QuoteLib__StockStatus state;
  int32_t moc;
  protobuf_c_boolean has_stkgrp;
  int32_t stkgrp;
};
extern char quote_lib__mkt_stat__lowtime__default_value[];
extern char quote_lib__mkt_stat__hightime__default_value[];
#define QUOTE_LIB__MKT_STAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__mkt_stat__descriptor) \
    , QUOTE_LIB__MSG_TYPES__MKT_STAT, 0, 0, 0, 0, 0, 0, quote_lib__mkt_stat__lowtime__default_value, quote_lib__mkt_stat__hightime__default_value, 0, 0, QUOTE_LIB__STOCK_STATUS__A, 0, 0,-1 }


struct  _QuoteLib__OptQuote
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  float bid;
  float ask;
  int32_t bidsize;
  int32_t asksize;
  protobuf_c_boolean isamer;
  int32_t multiplier;
  float strike;
  char *expiry;
  protobuf_c_boolean ishalted;
  protobuf_c_boolean has_seq_num;
  int32_t seq_num;
};
extern char quote_lib__opt_quote__expiry__default_value[];
#define QUOTE_LIB__OPT_QUOTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__opt_quote__descriptor) \
    , QUOTE_LIB__MSG_TYPES__OPTION_QUOTE, 0, 0, 0, 0, 1, 100, 0, quote_lib__opt_quote__expiry__default_value, 0, 0,0 }


struct  _QuoteLib__OptTrade
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  int32_t volume;
  float last;
  int32_t oi;
  char *expiry;
  float strike;
  protobuf_c_boolean has_iscxl;
  protobuf_c_boolean iscxl;
  char *trdtime;
  float chg;
  protobuf_c_boolean isamer;
  int32_t multiplier;
  int32_t trdmrkr;
  protobuf_c_boolean has_seq_num;
  int32_t seq_num;
};
extern char quote_lib__opt_trade__expiry__default_value[];
extern char quote_lib__opt_trade__trd_time__default_value[];
#define QUOTE_LIB__OPT_TRADE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__opt_trade__descriptor) \
    , QUOTE_LIB__MSG_TYPES__OPTION_TRADE, 0, 0, 0, quote_lib__opt_trade__expiry__default_value, 0, 0,0, quote_lib__opt_trade__trd_time__default_value, 0, 1, 100, 0, 0,0 }


struct  _QuoteLib__OptRFQ
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  protobuf_c_boolean isamer;
  int32_t multiplier;
  float strike;
  char *expiry;
  int32_t size;
};
extern char quote_lib__opt_rfq__expiry__default_value[];
#define QUOTE_LIB__OPT_RFQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__opt_rfq__descriptor) \
    , QUOTE_LIB__MSG_TYPES__OPTION_RFQ, 1, 100, 0, quote_lib__opt_rfq__expiry__default_value, 0 }


struct  _QuoteLib__OptStat
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  float bid;
  int32_t bidsize;
  float ask;
  int32_t asksize;
  float last;
  int32_t oi;
  int32_t volume;
  float chg;
  float open;
  float high;
  float low;
  protobuf_c_boolean has_ishalted;
  protobuf_c_boolean ishalted;
  int32_t multiplier;
  protobuf_c_boolean has_seq_num;
  int32_t seq_num;
  char *hitime;
  char *lotime;
  char *expiry;
  float value;
  float close;
  float pdclose;
  float strike;
  protobuf_c_boolean isamer;
};
extern char quote_lib__opt_stat__hitime__default_value[];
extern char quote_lib__opt_stat__lotime__default_value[];
extern char quote_lib__opt_stat__expiry__default_value[];
#define QUOTE_LIB__OPT_STAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__opt_stat__descriptor) \
    , QUOTE_LIB__MSG_TYPES__OPTION_STAT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 100, 0,0, quote_lib__opt_stat__hitime__default_value, quote_lib__opt_stat__lotime__default_value, quote_lib__opt_stat__expiry__default_value, 0, 0, 0, 0, 1 }


struct  _QuoteLib__FutQuote
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  float bid;
  float ask;
  float bidsize;
  float asksize;
  protobuf_c_boolean ishalted;
  char *expiry;
  int32_t multiplier;
  protobuf_c_boolean has_seq_num;
  int32_t seq_num;
};
extern char quote_lib__fut_quote__expiry__default_value[];
#define QUOTE_LIB__FUT_QUOTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__fut_quote__descriptor) \
    , QUOTE_LIB__MSG_TYPES__FUTURE_QUOTE, 0, 0, 0, 0, 0, quote_lib__fut_quote__expiry__default_value, 200, 0,0 }


struct  _QuoteLib__FutTrade
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  int32_t volume;
  float last;
  float chg;
  protobuf_c_boolean iscxl;
  char *expiry;
  char *trdtime;
  int32_t multiplier;
  int32_t trdmrkr;
  protobuf_c_boolean has_seq_num;
  int32_t seq_num;
};
extern char quote_lib__fut_trade__expiry__default_value[];
extern char quote_lib__fut_trade__trd_time__default_value[];
#define QUOTE_LIB__FUT_TRADE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__fut_trade__descriptor) \
    , QUOTE_LIB__MSG_TYPES__FUTURE_TRADE, 0, 0, 0, 0, quote_lib__fut_trade__expiry__default_value, quote_lib__fut_trade__trd_time__default_value, 100, 0, 0,0 }


struct  _QuoteLib__FutRFQ
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  int32_t multiplier;
  char *expiry;
  int32_t size;
  protobuf_c_boolean has_seq_num;
  int32_t seq_num;
};
extern char quote_lib__fut_rfq__expiry__default_value[];
#define QUOTE_LIB__FUT_RFQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__fut_rfq__descriptor) \
    , QUOTE_LIB__MSG_TYPES__FUTURE_RFQ, 100, quote_lib__fut_rfq__expiry__default_value, 0, 0,0 }


struct  _QuoteLib__FutStat
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  float bid;
  float ask;
  float bidsize;
  float asksize;
  float open;
  float high;
  float low;
  float settle;
  float chg;
  float psettle;
  float oi;
  int32_t volume;
  float last;
  protobuf_c_boolean ishalted;
  protobuf_c_boolean has_seq_num;
  int32_t seq_num;
  char *hitime;
  char *lotime;
  char *expiry;
  float value;
  float multiplier;
};
extern char quote_lib__fut_stat__hitime__default_value[];
extern char quote_lib__fut_stat__lotime__default_value[];
extern char quote_lib__fut_stat__expiry__default_value[];
#define QUOTE_LIB__FUT_STAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__fut_stat__descriptor) \
    , QUOTE_LIB__MSG_TYPES__FUTURE_STAT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, quote_lib__fut_stat__hitime__default_value, quote_lib__fut_stat__lotime__default_value, quote_lib__fut_stat__expiry__default_value, 0, 0 }


struct  _QuoteLib__FutOptBulletin
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  char *message;
};
extern char quote_lib__fut_opt_bulletin__message__default_value[];
#define QUOTE_LIB__FUT_OPT_BULLETIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__fut_opt_bulletin__descriptor) \
    , QUOTE_LIB__MSG_TYPES__FUTOPT_BULLETIN, quote_lib__fut_opt_bulletin__message__default_value }


struct  _QuoteLib__InstrDfn
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  char *strikeccy;
  int32_t maxordersz;
  int32_t minordersz;
  float maxpxthresh;
  float minpxthresh;
  float tickinc;
  protobuf_c_boolean has_isamer;
  protobuf_c_boolean isamer;
  char *type;
  char *group;
  char *instr;
  char *externid;
  char *marker;
  char *ulrootsym;
  int32_t consize;
  float tick;
  char *ulccy;
  protobuf_c_boolean has_expday;
  int32_t expday;
  protobuf_c_boolean has_strike;
  float strike;
  protobuf_c_boolean has_exmnth;
  int32_t exmnth;
  protobuf_c_boolean has_exyr;
  int32_t exyr;
};
extern char quote_lib__instr_dfn__strike_ccy__default_value[];
extern char quote_lib__instr_dfn__type__default_value[];
extern char quote_lib__instr_dfn__group__default_value[];
extern char quote_lib__instr_dfn__instr__default_value[];
extern char quote_lib__instr_dfn__extern_id__default_value[];
extern char quote_lib__instr_dfn__marker__default_value[];
extern char quote_lib__instr_dfn__ulrootsym__default_value[];
extern char quote_lib__instr_dfn__ulccy__default_value[];
#define QUOTE_LIB__INSTR_DFN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__instr_dfn__descriptor) \
    , QUOTE_LIB__MSG_TYPES__OPTION_DFN, quote_lib__instr_dfn__strike_ccy__default_value, 0, 0, 0, 0, 0, 0,1, quote_lib__instr_dfn__type__default_value, quote_lib__instr_dfn__group__default_value, quote_lib__instr_dfn__instr__default_value, quote_lib__instr_dfn__extern_id__default_value, quote_lib__instr_dfn__marker__default_value, quote_lib__instr_dfn__ulrootsym__default_value, 0, 0, quote_lib__instr_dfn__ulccy__default_value, 0,0, 0,0, 0,0, 0,0 }


struct  _QuoteLib__Depthquote
{
  ProtobufCMessage base;
  float bid;
  float ask;
  int32_t bidsize;
  int32_t asksize;
  int32_t nbidord;
  int32_t naskord;
  int32_t level;
  int64_t asktime;
  int64_t bidtime;
};
#define QUOTE_LIB__DEPTHQUOTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__depthquote__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _QuoteLib__BDMDepth
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  protobuf_c_boolean has_isamer;
  protobuf_c_boolean isamer;
  protobuf_c_boolean has_multiplier;
  int32_t multiplier;
  protobuf_c_boolean has_strike;
  float strike;
  char *expiry;
  size_t n_quote;
  QuoteLib__Depthquote **quote;
};
extern char quote_lib__bdmdepth__expiry__default_value[];
#define QUOTE_LIB__BDMDEPTH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__bdmdepth__descriptor) \
    , QUOTE_LIB__MSG_TYPES__OPT_DEPTH, 0,1, 0,100, 0,0, quote_lib__bdmdepth__expiry__default_value, 0,NULL }


struct  _QuoteLib__EndOfSales
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  protobuf_c_boolean end;
  char *time;
};
extern char quote_lib__end_of_sales__time__default_value[];
#define QUOTE_LIB__END_OF_SALES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__end_of_sales__descriptor) \
    , QUOTE_LIB__MSG_TYPES__FO_END_OF_TRANS, 0, quote_lib__end_of_sales__time__default_value }


struct  _QuoteLib__QfSymbStatus
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  char *symbol;
  char *exchid;
  char *cusip;
  protobuf_c_boolean has_lotsz;
  int32_t lotsz;
  char *ccy;
  protobuf_c_boolean has_db_fv;
  double db_fv;
  protobuf_c_boolean has_last;
  double last;
  protobuf_c_boolean has_moc_elig;
  protobuf_c_boolean moc_elig;
  protobuf_c_boolean has_is_stk;
  protobuf_c_boolean is_stk;
  char *issuer;
  protobuf_c_boolean has_stkgrp;
  int32_t stkgrp;
  protobuf_c_boolean has_state;
  QuoteLib__StockStatus state;
};
extern char quote_lib__qf_symb_status__symbol__default_value[];
extern char quote_lib__qf_symb_status__exch_id__default_value[];
extern char quote_lib__qf_symb_status__cusip__default_value[];
extern char quote_lib__qf_symb_status__ccy__default_value[];
extern char quote_lib__qf_symb_status__issuer__default_value[];
#define QUOTE_LIB__QF_SYMB_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__qf_symb_status__descriptor) \
    , QUOTE_LIB__MSG_TYPES__QF_SYM_STATUS, quote_lib__qf_symb_status__symbol__default_value, quote_lib__qf_symb_status__exch_id__default_value, quote_lib__qf_symb_status__cusip__default_value, 0,100, quote_lib__qf_symb_status__ccy__default_value, 0,0, 0,0, 0,0, 0,1, quote_lib__qf_symb_status__issuer__default_value, 0,0, 0,QUOTE_LIB__STOCK_STATUS__A }


struct  _QuoteLib__MarketState
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  QuoteLib__MktState state;
  int32_t stkgrp;
  char *ex_time;
};
extern char quote_lib__market_state__ex_time__default_value[];
#define QUOTE_LIB__MARKET_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__market_state__descriptor) \
    , QUOTE_LIB__MSG_TYPES__QF_MKT_STATE, QUOTE_LIB__MKT_STATE__PRE_OPEN, 0, quote_lib__market_state__ex_time__default_value }


struct  _QuoteLib__TradingTierStatus
{
  ProtobufCMessage base;
  QuoteLib__MsgTypes msgtype;
  char *exch_id;
  int32_t num_symbols;
  int32_t num_stk_grp;
  char *ex_time;
  char *tierid;
};
extern char quote_lib__trading_tier_status__exch_id__default_value[];
extern char quote_lib__trading_tier_status__ex_time__default_value[];
extern char quote_lib__trading_tier_status__tierid__default_value[];
#define QUOTE_LIB__TRADING_TIER_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quote_lib__trading_tier_status__descriptor) \
    , QUOTE_LIB__MSG_TYPES__QF_TRD_TIER_STATUS, quote_lib__trading_tier_status__exch_id__default_value, 0, 0, quote_lib__trading_tier_status__ex_time__default_value, quote_lib__trading_tier_status__tierid__default_value }


/* QuoteLib__Quote methods */
void   quote_lib__quote__init
                     (QuoteLib__Quote         *message);
size_t quote_lib__quote__get_packed_size
                     (const QuoteLib__Quote   *message);
size_t quote_lib__quote__pack
                     (const QuoteLib__Quote   *message,
                      uint8_t             *out);
size_t quote_lib__quote__pack_to_buffer
                     (const QuoteLib__Quote   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__Quote *
       quote_lib__quote__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__quote__free_unpacked
                     (QuoteLib__Quote *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__Trade methods */
void   quote_lib__trade__init
                     (QuoteLib__Trade         *message);
size_t quote_lib__trade__get_packed_size
                     (const QuoteLib__Trade   *message);
size_t quote_lib__trade__pack
                     (const QuoteLib__Trade   *message,
                      uint8_t             *out);
size_t quote_lib__trade__pack_to_buffer
                     (const QuoteLib__Trade   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__Trade *
       quote_lib__trade__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__trade__free_unpacked
                     (QuoteLib__Trade *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__StkStatus methods */
void   quote_lib__stk_status__init
                     (QuoteLib__StkStatus         *message);
size_t quote_lib__stk_status__get_packed_size
                     (const QuoteLib__StkStatus   *message);
size_t quote_lib__stk_status__pack
                     (const QuoteLib__StkStatus   *message,
                      uint8_t             *out);
size_t quote_lib__stk_status__pack_to_buffer
                     (const QuoteLib__StkStatus   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__StkStatus *
       quote_lib__stk_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__stk_status__free_unpacked
                     (QuoteLib__StkStatus *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__Index methods */
void   quote_lib__index__init
                     (QuoteLib__Index         *message);
size_t quote_lib__index__get_packed_size
                     (const QuoteLib__Index   *message);
size_t quote_lib__index__pack
                     (const QuoteLib__Index   *message,
                      uint8_t             *out);
size_t quote_lib__index__pack_to_buffer
                     (const QuoteLib__Index   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__Index *
       quote_lib__index__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__index__free_unpacked
                     (QuoteLib__Index *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__Dividend methods */
void   quote_lib__dividend__init
                     (QuoteLib__Dividend         *message);
size_t quote_lib__dividend__get_packed_size
                     (const QuoteLib__Dividend   *message);
size_t quote_lib__dividend__pack
                     (const QuoteLib__Dividend   *message,
                      uint8_t             *out);
size_t quote_lib__dividend__pack_to_buffer
                     (const QuoteLib__Dividend   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__Dividend *
       quote_lib__dividend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__dividend__free_unpacked
                     (QuoteLib__Dividend *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__HiLo52 methods */
void   quote_lib__hi_lo52__init
                     (QuoteLib__HiLo52         *message);
size_t quote_lib__hi_lo52__get_packed_size
                     (const QuoteLib__HiLo52   *message);
size_t quote_lib__hi_lo52__pack
                     (const QuoteLib__HiLo52   *message,
                      uint8_t             *out);
size_t quote_lib__hi_lo52__pack_to_buffer
                     (const QuoteLib__HiLo52   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__HiLo52 *
       quote_lib__hi_lo52__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__hi_lo52__free_unpacked
                     (QuoteLib__HiLo52 *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__EquityVolume methods */
void   quote_lib__equity_volume__init
                     (QuoteLib__EquityVolume         *message);
size_t quote_lib__equity_volume__get_packed_size
                     (const QuoteLib__EquityVolume   *message);
size_t quote_lib__equity_volume__pack
                     (const QuoteLib__EquityVolume   *message,
                      uint8_t             *out);
size_t quote_lib__equity_volume__pack_to_buffer
                     (const QuoteLib__EquityVolume   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__EquityVolume *
       quote_lib__equity_volume__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__equity_volume__free_unpacked
                     (QuoteLib__EquityVolume *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__Moc methods */
void   quote_lib__moc__init
                     (QuoteLib__Moc         *message);
size_t quote_lib__moc__get_packed_size
                     (const QuoteLib__Moc   *message);
size_t quote_lib__moc__pack
                     (const QuoteLib__Moc   *message,
                      uint8_t             *out);
size_t quote_lib__moc__pack_to_buffer
                     (const QuoteLib__Moc   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__Moc *
       quote_lib__moc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__moc__free_unpacked
                     (QuoteLib__Moc *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__Info methods */
void   quote_lib__info__init
                     (QuoteLib__Info         *message);
size_t quote_lib__info__get_packed_size
                     (const QuoteLib__Info   *message);
size_t quote_lib__info__pack
                     (const QuoteLib__Info   *message,
                      uint8_t             *out);
size_t quote_lib__info__pack_to_buffer
                     (const QuoteLib__Info   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__Info *
       quote_lib__info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__info__free_unpacked
                     (QuoteLib__Info *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__EquitySummary methods */
void   quote_lib__equity_summary__init
                     (QuoteLib__EquitySummary         *message);
size_t quote_lib__equity_summary__get_packed_size
                     (const QuoteLib__EquitySummary   *message);
size_t quote_lib__equity_summary__pack
                     (const QuoteLib__EquitySummary   *message,
                      uint8_t             *out);
size_t quote_lib__equity_summary__pack_to_buffer
                     (const QuoteLib__EquitySummary   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__EquitySummary *
       quote_lib__equity_summary__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__equity_summary__free_unpacked
                     (QuoteLib__EquitySummary *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__MktStat methods */
void   quote_lib__mkt_stat__init
                     (QuoteLib__MktStat         *message);
size_t quote_lib__mkt_stat__get_packed_size
                     (const QuoteLib__MktStat   *message);
size_t quote_lib__mkt_stat__pack
                     (const QuoteLib__MktStat   *message,
                      uint8_t             *out);
size_t quote_lib__mkt_stat__pack_to_buffer
                     (const QuoteLib__MktStat   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__MktStat *
       quote_lib__mkt_stat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__mkt_stat__free_unpacked
                     (QuoteLib__MktStat *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__OptQuote methods */
void   quote_lib__opt_quote__init
                     (QuoteLib__OptQuote         *message);
size_t quote_lib__opt_quote__get_packed_size
                     (const QuoteLib__OptQuote   *message);
size_t quote_lib__opt_quote__pack
                     (const QuoteLib__OptQuote   *message,
                      uint8_t             *out);
size_t quote_lib__opt_quote__pack_to_buffer
                     (const QuoteLib__OptQuote   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__OptQuote *
       quote_lib__opt_quote__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__opt_quote__free_unpacked
                     (QuoteLib__OptQuote *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__OptTrade methods */
void   quote_lib__opt_trade__init
                     (QuoteLib__OptTrade         *message);
size_t quote_lib__opt_trade__get_packed_size
                     (const QuoteLib__OptTrade   *message);
size_t quote_lib__opt_trade__pack
                     (const QuoteLib__OptTrade   *message,
                      uint8_t             *out);
size_t quote_lib__opt_trade__pack_to_buffer
                     (const QuoteLib__OptTrade   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__OptTrade *
       quote_lib__opt_trade__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__opt_trade__free_unpacked
                     (QuoteLib__OptTrade *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__OptRFQ methods */
void   quote_lib__opt_rfq__init
                     (QuoteLib__OptRFQ         *message);
size_t quote_lib__opt_rfq__get_packed_size
                     (const QuoteLib__OptRFQ   *message);
size_t quote_lib__opt_rfq__pack
                     (const QuoteLib__OptRFQ   *message,
                      uint8_t             *out);
size_t quote_lib__opt_rfq__pack_to_buffer
                     (const QuoteLib__OptRFQ   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__OptRFQ *
       quote_lib__opt_rfq__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__opt_rfq__free_unpacked
                     (QuoteLib__OptRFQ *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__OptStat methods */
void   quote_lib__opt_stat__init
                     (QuoteLib__OptStat         *message);
size_t quote_lib__opt_stat__get_packed_size
                     (const QuoteLib__OptStat   *message);
size_t quote_lib__opt_stat__pack
                     (const QuoteLib__OptStat   *message,
                      uint8_t             *out);
size_t quote_lib__opt_stat__pack_to_buffer
                     (const QuoteLib__OptStat   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__OptStat *
       quote_lib__opt_stat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__opt_stat__free_unpacked
                     (QuoteLib__OptStat *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__FutQuote methods */
void   quote_lib__fut_quote__init
                     (QuoteLib__FutQuote         *message);
size_t quote_lib__fut_quote__get_packed_size
                     (const QuoteLib__FutQuote   *message);
size_t quote_lib__fut_quote__pack
                     (const QuoteLib__FutQuote   *message,
                      uint8_t             *out);
size_t quote_lib__fut_quote__pack_to_buffer
                     (const QuoteLib__FutQuote   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__FutQuote *
       quote_lib__fut_quote__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__fut_quote__free_unpacked
                     (QuoteLib__FutQuote *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__FutTrade methods */
void   quote_lib__fut_trade__init
                     (QuoteLib__FutTrade         *message);
size_t quote_lib__fut_trade__get_packed_size
                     (const QuoteLib__FutTrade   *message);
size_t quote_lib__fut_trade__pack
                     (const QuoteLib__FutTrade   *message,
                      uint8_t             *out);
size_t quote_lib__fut_trade__pack_to_buffer
                     (const QuoteLib__FutTrade   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__FutTrade *
       quote_lib__fut_trade__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__fut_trade__free_unpacked
                     (QuoteLib__FutTrade *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__FutRFQ methods */
void   quote_lib__fut_rfq__init
                     (QuoteLib__FutRFQ         *message);
size_t quote_lib__fut_rfq__get_packed_size
                     (const QuoteLib__FutRFQ   *message);
size_t quote_lib__fut_rfq__pack
                     (const QuoteLib__FutRFQ   *message,
                      uint8_t             *out);
size_t quote_lib__fut_rfq__pack_to_buffer
                     (const QuoteLib__FutRFQ   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__FutRFQ *
       quote_lib__fut_rfq__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__fut_rfq__free_unpacked
                     (QuoteLib__FutRFQ *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__FutStat methods */
void   quote_lib__fut_stat__init
                     (QuoteLib__FutStat         *message);
size_t quote_lib__fut_stat__get_packed_size
                     (const QuoteLib__FutStat   *message);
size_t quote_lib__fut_stat__pack
                     (const QuoteLib__FutStat   *message,
                      uint8_t             *out);
size_t quote_lib__fut_stat__pack_to_buffer
                     (const QuoteLib__FutStat   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__FutStat *
       quote_lib__fut_stat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__fut_stat__free_unpacked
                     (QuoteLib__FutStat *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__FutOptBulletin methods */
void   quote_lib__fut_opt_bulletin__init
                     (QuoteLib__FutOptBulletin         *message);
size_t quote_lib__fut_opt_bulletin__get_packed_size
                     (const QuoteLib__FutOptBulletin   *message);
size_t quote_lib__fut_opt_bulletin__pack
                     (const QuoteLib__FutOptBulletin   *message,
                      uint8_t             *out);
size_t quote_lib__fut_opt_bulletin__pack_to_buffer
                     (const QuoteLib__FutOptBulletin   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__FutOptBulletin *
       quote_lib__fut_opt_bulletin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__fut_opt_bulletin__free_unpacked
                     (QuoteLib__FutOptBulletin *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__InstrDfn methods */
void   quote_lib__instr_dfn__init
                     (QuoteLib__InstrDfn         *message);
size_t quote_lib__instr_dfn__get_packed_size
                     (const QuoteLib__InstrDfn   *message);
size_t quote_lib__instr_dfn__pack
                     (const QuoteLib__InstrDfn   *message,
                      uint8_t             *out);
size_t quote_lib__instr_dfn__pack_to_buffer
                     (const QuoteLib__InstrDfn   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__InstrDfn *
       quote_lib__instr_dfn__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__instr_dfn__free_unpacked
                     (QuoteLib__InstrDfn *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__Depthquote methods */
void   quote_lib__depthquote__init
                     (QuoteLib__Depthquote         *message);
size_t quote_lib__depthquote__get_packed_size
                     (const QuoteLib__Depthquote   *message);
size_t quote_lib__depthquote__pack
                     (const QuoteLib__Depthquote   *message,
                      uint8_t             *out);
size_t quote_lib__depthquote__pack_to_buffer
                     (const QuoteLib__Depthquote   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__Depthquote *
       quote_lib__depthquote__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__depthquote__free_unpacked
                     (QuoteLib__Depthquote *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__BDMDepth methods */
void   quote_lib__bdmdepth__init
                     (QuoteLib__BDMDepth         *message);
size_t quote_lib__bdmdepth__get_packed_size
                     (const QuoteLib__BDMDepth   *message);
size_t quote_lib__bdmdepth__pack
                     (const QuoteLib__BDMDepth   *message,
                      uint8_t             *out);
size_t quote_lib__bdmdepth__pack_to_buffer
                     (const QuoteLib__BDMDepth   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__BDMDepth *
       quote_lib__bdmdepth__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__bdmdepth__free_unpacked
                     (QuoteLib__BDMDepth *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__EndOfSales methods */
void   quote_lib__end_of_sales__init
                     (QuoteLib__EndOfSales         *message);
size_t quote_lib__end_of_sales__get_packed_size
                     (const QuoteLib__EndOfSales   *message);
size_t quote_lib__end_of_sales__pack
                     (const QuoteLib__EndOfSales   *message,
                      uint8_t             *out);
size_t quote_lib__end_of_sales__pack_to_buffer
                     (const QuoteLib__EndOfSales   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__EndOfSales *
       quote_lib__end_of_sales__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__end_of_sales__free_unpacked
                     (QuoteLib__EndOfSales *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__QfSymbStatus methods */
void   quote_lib__qf_symb_status__init
                     (QuoteLib__QfSymbStatus         *message);
size_t quote_lib__qf_symb_status__get_packed_size
                     (const QuoteLib__QfSymbStatus   *message);
size_t quote_lib__qf_symb_status__pack
                     (const QuoteLib__QfSymbStatus   *message,
                      uint8_t             *out);
size_t quote_lib__qf_symb_status__pack_to_buffer
                     (const QuoteLib__QfSymbStatus   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__QfSymbStatus *
       quote_lib__qf_symb_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__qf_symb_status__free_unpacked
                     (QuoteLib__QfSymbStatus *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__MarketState methods */
void   quote_lib__market_state__init
                     (QuoteLib__MarketState         *message);
size_t quote_lib__market_state__get_packed_size
                     (const QuoteLib__MarketState   *message);
size_t quote_lib__market_state__pack
                     (const QuoteLib__MarketState   *message,
                      uint8_t             *out);
size_t quote_lib__market_state__pack_to_buffer
                     (const QuoteLib__MarketState   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__MarketState *
       quote_lib__market_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__market_state__free_unpacked
                     (QuoteLib__MarketState *message,
                      ProtobufCAllocator *allocator);
/* QuoteLib__TradingTierStatus methods */
void   quote_lib__trading_tier_status__init
                     (QuoteLib__TradingTierStatus         *message);
size_t quote_lib__trading_tier_status__get_packed_size
                     (const QuoteLib__TradingTierStatus   *message);
size_t quote_lib__trading_tier_status__pack
                     (const QuoteLib__TradingTierStatus   *message,
                      uint8_t             *out);
size_t quote_lib__trading_tier_status__pack_to_buffer
                     (const QuoteLib__TradingTierStatus   *message,
                      ProtobufCBuffer     *buffer);
QuoteLib__TradingTierStatus *
       quote_lib__trading_tier_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quote_lib__trading_tier_status__free_unpacked
                     (QuoteLib__TradingTierStatus *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*QuoteLib__Quote_Closure)
                 (const QuoteLib__Quote *message,
                  void *closure_data);
typedef void (*QuoteLib__Trade_Closure)
                 (const QuoteLib__Trade *message,
                  void *closure_data);
typedef void (*QuoteLib__StkStatus_Closure)
                 (const QuoteLib__StkStatus *message,
                  void *closure_data);
typedef void (*QuoteLib__Index_Closure)
                 (const QuoteLib__Index *message,
                  void *closure_data);
typedef void (*QuoteLib__Dividend_Closure)
                 (const QuoteLib__Dividend *message,
                  void *closure_data);
typedef void (*QuoteLib__HiLo52_Closure)
                 (const QuoteLib__HiLo52 *message,
                  void *closure_data);
typedef void (*QuoteLib__EquityVolume_Closure)
                 (const QuoteLib__EquityVolume *message,
                  void *closure_data);
typedef void (*QuoteLib__Moc_Closure)
                 (const QuoteLib__Moc *message,
                  void *closure_data);
typedef void (*QuoteLib__Info_Closure)
                 (const QuoteLib__Info *message,
                  void *closure_data);
typedef void (*QuoteLib__EquitySummary_Closure)
                 (const QuoteLib__EquitySummary *message,
                  void *closure_data);
typedef void (*QuoteLib__MktStat_Closure)
                 (const QuoteLib__MktStat *message,
                  void *closure_data);
typedef void (*QuoteLib__OptQuote_Closure)
                 (const QuoteLib__OptQuote *message,
                  void *closure_data);
typedef void (*QuoteLib__OptTrade_Closure)
                 (const QuoteLib__OptTrade *message,
                  void *closure_data);
typedef void (*QuoteLib__OptRFQ_Closure)
                 (const QuoteLib__OptRFQ *message,
                  void *closure_data);
typedef void (*QuoteLib__OptStat_Closure)
                 (const QuoteLib__OptStat *message,
                  void *closure_data);
typedef void (*QuoteLib__FutQuote_Closure)
                 (const QuoteLib__FutQuote *message,
                  void *closure_data);
typedef void (*QuoteLib__FutTrade_Closure)
                 (const QuoteLib__FutTrade *message,
                  void *closure_data);
typedef void (*QuoteLib__FutRFQ_Closure)
                 (const QuoteLib__FutRFQ *message,
                  void *closure_data);
typedef void (*QuoteLib__FutStat_Closure)
                 (const QuoteLib__FutStat *message,
                  void *closure_data);
typedef void (*QuoteLib__FutOptBulletin_Closure)
                 (const QuoteLib__FutOptBulletin *message,
                  void *closure_data);
typedef void (*QuoteLib__InstrDfn_Closure)
                 (const QuoteLib__InstrDfn *message,
                  void *closure_data);
typedef void (*QuoteLib__Depthquote_Closure)
                 (const QuoteLib__Depthquote *message,
                  void *closure_data);
typedef void (*QuoteLib__BDMDepth_Closure)
                 (const QuoteLib__BDMDepth *message,
                  void *closure_data);
typedef void (*QuoteLib__EndOfSales_Closure)
                 (const QuoteLib__EndOfSales *message,
                  void *closure_data);
typedef void (*QuoteLib__QfSymbStatus_Closure)
                 (const QuoteLib__QfSymbStatus *message,
                  void *closure_data);
typedef void (*QuoteLib__MarketState_Closure)
                 (const QuoteLib__MarketState *message,
                  void *closure_data);
typedef void (*QuoteLib__TradingTierStatus_Closure)
                 (const QuoteLib__TradingTierStatus *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    quote_lib__constants__descriptor;
extern const ProtobufCEnumDescriptor    quote_lib__bdmquote_status__descriptor;
extern const ProtobufCEnumDescriptor    quote_lib__stock_status__descriptor;
extern const ProtobufCEnumDescriptor    quote_lib__div_codes__descriptor;
extern const ProtobufCEnumDescriptor    quote_lib__cross_types__descriptor;
extern const ProtobufCEnumDescriptor    quote_lib__settlement_types__descriptor;
extern const ProtobufCEnumDescriptor    quote_lib__bdmtrd_mrks__descriptor;
extern const ProtobufCEnumDescriptor    quote_lib__ccy__descriptor;
extern const ProtobufCEnumDescriptor    quote_lib__mkt_state__descriptor;
extern const ProtobufCEnumDescriptor    quote_lib__msg_types__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__quote__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__trade__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__stk_status__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__index__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__dividend__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__hi_lo52__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__equity_volume__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__moc__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__info__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__equity_summary__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__mkt_stat__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__opt_quote__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__opt_trade__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__opt_rfq__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__opt_stat__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__fut_quote__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__fut_trade__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__fut_rfq__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__fut_stat__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__fut_opt_bulletin__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__instr_dfn__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__depthquote__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__bdmdepth__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__end_of_sales__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__qf_symb_status__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__market_state__descriptor;
extern const ProtobufCMessageDescriptor quote_lib__trading_tier_status__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_QuoteLib_2eproto__INCLUDED */
